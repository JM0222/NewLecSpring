<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	<!-- Exam exam = new NewlecExam(); -->
	<bean id = "target" class = "spring.aop.entity.NewlecExam" p:kor="1" p:eng="1" p:math="1" p:com="1"/>
	<bean id = "logBeforeAdvice" class="spring.aop.advice.LogBeforeAdvice"/>
	<bean id = "logAroundAdvice" class="spring.aop.advice.LogAroundAdvice"/>
	<bean id = "logAfterReturningAdvice" class="spring.aop.advice.LogAfterReturningAdvice"/>
	<bean id = "logAfterThrowingAdvice" class="spring.aop.advice.LogAfterThrowingAdvice"/>
	
	<bean id = "classicPointCut" class="org.springframework.aop.support.NameMatchMethodPointcut">
		<property name ="mappedName" value = "total"/>
		<!--  advice 별로 사용가능 -->
	</bean>
	
	<bean id = "classicBeforeAdvisor" class="org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor">
		<!-- 연결 하고자하는 advisor -->
		<property name = "advice" ref ="logBeforeAdvice"></property>
		<property name = "pointcut" ref ="classicPointCut"></property>
	</bean>
	<!--  합친 버전 -->
	<bean id = "classicBeforeAdvisor" class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">
		<!-- 연결 하고자하는 advisor -->
		<property name = "advice" ref ="logBeforeAdvice"></property>
		<property name ="mappedNames">
			<list>
				<value>total</value>
				<value>avg</value>
			</list>
		</property>
	</bean>
	
	<bean id = "proxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name= "target" ref="target"/>
		<property name= "interceptorNames">
			<list>
				<value>logAroundAdvice</value> 
				<value>classicBeforeAdvisor</value> <!--재설정해주기 -->
				<value>logAfterReturningAdvice</value>
				<value>logAfterThrowingAdvice</value>
			</list>
		</property>
	</bean>
	
</beans>
